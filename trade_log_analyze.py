# This is a script for analyzing the trade log generated by backtest_simulator.py
# Usage: python trade_log_analyze.py --input path/to/trade_log.csv

import argparse
import os
import pandas as pd
import matplotlib.pyplot as plt

output_dir = "analyze_data"
# The actual output subdirectory will be created in main() based on input filename

def load_data(filepath: str) -> pd.DataFrame:
    df = pd.read_csv(filepath)
    df = df[(df['state'] == 'entry') & (df['memo'].isin(['will_win', 'will_lose']))]
    df = df.dropna(subset=[
        'ma30', 'diff_ma30', 'ma10', 'diff_ma10',
        'rsi', 'bb_upper', 'bb_middle', 'bb_lower'
    ])
    df['label'] = df['memo'].map({'will_win': 1, 'will_lose': 0})
    return df


def analyze_thresholds(df: pd.DataFrame, feature: str, thresholds: list[float]) -> pd.DataFrame:
    results = []
    for t in thresholds:
        subset = df[df[feature] >= t]
        if len(subset) == 0:
            continue
        win_rate = subset['label'].mean()
        results.append({
            'feature': feature,
            'threshold': t,
            'count': len(subset),
            'win_rate': win_rate
        })
    return pd.DataFrame(results)


def analyze_multi_feature_thresholds(df: pd.DataFrame, feature_thresholds: dict) -> dict:
    query = " & ".join([f"{k} >= {v}" for k, v in feature_thresholds.items()])
    subset = df.query(query)
    if len(subset) == 0:
        return {"rule": query, "count": 0, "win_rate": None}
    return {
        "rule": query,
        "count": len(subset),
        "win_rate": subset['label'].mean()
    }


def plot_threshold_result(result_df: pd.DataFrame, feature: str, output_path: str):
    plt.figure(figsize=(10, 5))
    plt.plot(result_df['threshold'], result_df['win_rate'], marker='o')
    plt.title(f"Win Rate vs Threshold for {feature}")
    plt.xlabel(f"{feature} >= threshold")
    plt.ylabel("Win Rate")
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(os.path.join(output_path, f"threshold_plot_{feature}.png"))
    plt.close()


def main():
    parser = argparse.ArgumentParser(description="Analyze trade log file.")
    parser.add_argument("--input", type=str, required=True, help="Path to trade log CSV file")
    args = parser.parse_args()
    filepath = args.input

    # Extract filename without extension
    input_filename = os.path.splitext(os.path.basename(filepath))[0]
    output_path = os.path.join(output_dir, input_filename)
    if not os.path.exists(output_path):
        os.makedirs(output_path)

    df = load_data(filepath)

    features_to_analyze = ['rsi', 'diff_ma10', 'diff_ma30']
    threshold_ranges = {
        'rsi': list(range(20, 80, 2)),
        'diff_ma10': [x / 2 for x in range(-20, 10)],
        'diff_ma30': [x / 2 for x in range(-20, 10)]
    }

    for feature in features_to_analyze:
        thresholds = threshold_ranges[feature]
        result_df = analyze_thresholds(df, feature, thresholds)
        result_df.to_csv(os.path.join(output_path, f"threshold_analysis_{feature}.csv"), index=False)
        print(f"Top thresholds for {feature}:")
        print(result_df.sort_values(by="win_rate", ascending=False).head())
        plot_threshold_result(result_df, feature, output_path)

    # Example multi-feature rule
    combo_result = analyze_multi_feature_thresholds(df, {'rsi': 40, 'diff_ma10': -2})
    print("Multi-feature threshold result:", combo_result)


if __name__ == "__main__":
    main()
